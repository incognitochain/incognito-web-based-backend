# This is a basic workflow to help you get started with Actions

name: dev-branch

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: incognito-web-based-backend
    permissions:
      packages: write
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Prepare tagging data
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo "IMAGE_TAG=$IMAGE_ID:$VERSION" >> $GITHUB_ENV
      -
        name: Build and push image to github packages
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: BUILD_ENV=dev
          push: true
          tags: ${{ env.IMAGE_TAG }}
          labels: "runnumber=${GITHUB_RUN_ID}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
