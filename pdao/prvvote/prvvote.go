// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package prvvote

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// PrvvoteMetaData contains all meta data concerning the Prvvote contract.
var PrvvoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"burnBySign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_input\",\"type\":\"bytes32\"}],\"name\":\"getDataSign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50615e6580620000216000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063782d6fe111610104578063b48272cc116100a2578063dd62ed3e11610071578063dd62ed3e14610615578063ed97383a14610645578063f1127ed814610675578063f7d25dc0146106a5576101da565b8063b48272cc1461057d578063b4b5ea57146105ad578063c3cda520146105dd578063d505accf146105f9576101da565b806395d89b41116100de57806395d89b41146104cf5780639ab24eb0146104ed578063a457c2d71461051d578063a9059cbb1461054d576101da565b8063782d6fe11461043f5780637ecebe001461046f5780638e539e8c1461049f576101da565b80633644e5151161017c578063587cde1e1161014b578063587cde1e146103935780635c19a95c146103c35780636fcfff45146103df57806370a082311461040f576101da565b80633644e515146102f957806339509351146103175780633a46b1a8146103475780634cd88b7614610377576101da565b80631ea1940e116101b85780631ea1940e1461024b57806323b872dd1461027b57806324f178ff146102ab578063313ce567146102db576101da565b806306fdde03146101df578063095ea7b3146101fd57806318160ddd1461022d575b600080fd5b6101e76106d5565b6040516101f49190613389565b60405180910390f35b61021760048036038101906102129190613453565b610767565b60405161022491906134ae565b60405180910390f35b61023561078a565b60405161024291906134d8565b60405180910390f35b61026560048036038101906102609190613529565b610794565b60405161027291906134ae565b60405180910390f35b61029560048036038101906102909190613556565b6107b5565b6040516102a291906134ae565b60405180910390f35b6102c560048036038101906102c09190613a54565b6107e4565b6040516102d291906134ae565b60405180910390f35b6102e3610a1a565b6040516102f09190613c06565b60405180910390f35b610301610a23565b60405161030e9190613c30565b60405180910390f35b610331600480360381019061032c9190613453565b610a32565b60405161033e91906134ae565b60405180910390f35b610361600480360381019061035c9190613453565b610a69565b60405161036e91906134d8565b60405180910390f35b610391600480360381019061038c9190613cec565b610afd565b005b6103ad60048036038101906103a89190613d64565b610c7d565b6040516103ba9190613da0565b60405180910390f35b6103dd60048036038101906103d89190613d64565b610ccf565b005b6103f960048036038101906103f49190613d64565b610ce3565b6040516104069190613dda565b60405180910390f35b61042960048036038101906104249190613d64565b610d37565b60405161043691906134d8565b60405180910390f35b61045960048036038101906104549190613453565b610d80565b6040516104669190613e1c565b60405180910390f35b61048960048036038101906104849190613d64565b610d9c565b60405161049691906134d8565b60405180910390f35b6104b960048036038101906104b49190613e37565b610dec565b6040516104c691906134d8565b60405180910390f35b6104d7610e42565b6040516104e49190613389565b60405180910390f35b61050760048036038101906105029190613d64565b610ed4565b60405161051491906134d8565b60405180910390f35b61053760048036038101906105329190613453565b610fe5565b60405161054491906134ae565b60405180910390f35b61056760048036038101906105629190613453565b61105c565b60405161057491906134ae565b60405180910390f35b61059760048036038101906105929190613ebf565b61107f565b6040516105a491906134ae565b60405180910390f35b6105c760048036038101906105c29190613d64565b6110da565b6040516105d49190613e1c565b60405180910390f35b6105f760048036038101906105f29190613f1f565b6110f4565b005b610613600480360381019061060e9190613fac565b6111f8565b005b61062f600480360381019061062a919061404e565b61133a565b60405161063c91906134d8565b60405180910390f35b61065f600480360381019061065a91906140e4565b6113c1565b60405161066c91906134ae565b60405180910390f35b61068f600480360381019061068a91906141df565b6114f5565b60405161069c9190614294565b60405180910390f35b6106bf60048036038101906106ba9190613529565b611605565b6040516106cc9190613c30565b60405180910390f35b6060603680546106e4906142de565b80601f0160208091040260200160405190810160405280929190818152602001828054610710906142de565b801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b5050505050905090565b600080610772611617565b905061077f81858561161f565b600191505092915050565b6000603554905090565b6101306020528060005260406000206000915054906101000a900460ff1681565b6000806107c0611617565b90506107cd8582856117e8565b6107d8858585611874565b60019150509392505050565b600062591f998a1161082b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108229061435b565b60405180910390fd5b60828b511015610870576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610867906143c7565b60405180910390fd5b600061087b8c611aed565b90506096816000015160ff1614801561089b57506001816020015160ff16145b6108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190614433565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161461094c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109439061449f565b60405180910390fd5b61013160008260a00151815260200190815260200160002060009054906101000a900460ff16156109b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a99061450b565b60405180910390fd5b600161013160008360a00151815260200190815260200160002060006101000a81548160ff0219169083151502179055506109f58c8c8c8c8c8c8c8c8c8c611c16565b610a0781606001518260800151611d25565b60019150509a9950505050505050505050565b60006009905090565b6000610a2d611db2565b905090565b600080610a3d611617565b9050610a5e818585610a4f858961133a565b610a59919061455a565b61161f565b600191505092915050565b6000438210610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa4906145da565b60405180910390fd5b610af560cd60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083611df2565b905092915050565b60008060019054906101000a900460ff16159050808015610b2e5750600160008054906101000a900460ff1660ff16105b80610b5b5750610b3d30611f43565b158015610b5a5750600160008054906101000a900460ff1660ff16145b5b610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b919061466c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610bd7576001600060016101000a81548160ff0219169083151502179055505b610be18383611f66565b610c1f6040518060400160405280600981526020017f507276566f74696e670000000000000000000000000000000000000000000000815250611fc3565b8015610c785760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c6f91906146d1565b60405180910390a15b505050565b600080610c8983612054565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cc55780610cc7565b825b915050919050565b610ce0610cda611617565b826120bd565b50565b6000610d3060cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506121d7565b9050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610d94610d8f8484610a69565b61222a565b905092915050565b6000610de5609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612285565b9050919050565b6000438210610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e27906145da565b60405180910390fd5b610e3b60ce83611df2565b9050919050565b606060378054610e51906142de565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7d906142de565b8015610eca5780601f10610e9f57610100808354040283529160200191610eca565b820191906000526020600020905b815481529060010190602001808311610ead57829003601f168201915b5050505050905090565b60008060cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008114610fbc5760cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600182610f7091906146ec565b81548110610f8157610f80614720565b5b9060005260206000200160000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610fbf565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16915050919050565b600080610ff0611617565b90506000610ffe828661133a565b905083811015611043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103a906147c1565b60405180910390fd5b611050828686840361161f565b60019250505092915050565b600080611067611617565b9050611074818585611874565b600191505092915050565b600061109261108c611617565b83612293565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e308585856040516110c7949392919061480e565b60405180910390a1600190509392505050565b60006110ed6110e883610ed4565b61222a565b9050919050565b83421115611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112e9061489a565b60405180910390fd5b60006111996111917fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf89898960405160200161117694939291906148ba565b604051602081830303815290604052805190602001206122b1565b8585856122cb565b90506111a4816122f6565b86146111e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dc9061494b565b60405180910390fd5b6111ef81886120bd565b50505050505050565b8342111561123b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611232906149b7565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c988888861126a8c6122f6565b89604051602001611280969594939291906149d7565b60405160208183030381529060405280519060200120905060006112a3826122b1565b905060006112b3828787876122cb565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131a90614a84565b60405180910390fd5b61132e8a8a8a61161f565b50505050505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806113fb8a8a8a8a8a6040516020016113e0959493929190614ae2565b604051602081830303815290604052805190602001206122b1565b9050610130600082815260200190815260200160002060009054906101000a900460ff161561145f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145690614b77565b60405180910390fd5b600061146d828787876122cb565b90506001610130600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506114a6818a612293565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e308c8c8c6040516114db949392919061480e565b60405180910390a160019250505098975050505050505050565b6114fd613250565b60cd60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208263ffffffff168154811061155457611553614720565b5b906000526020600020016040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b6000611610826122b1565b9050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590614c09565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f490614c9b565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516117db91906134d8565b60405180910390a3505050565b60006117f4848461133a565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461186e5781811015611860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185790614d07565b60405180910390fd5b61186d848484840361161f565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118da90614d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194990614e2b565b60405180910390fd5b61195d838383612354565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156119e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119db90614ebd565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611ad491906134d8565b60405180910390a3611ae7848484612359565b50505050565b611af561328e565b611afd61328e565b82600081518110611b1157611b10614720565b5b602001015160f81c60f81b60f81c816000019060ff16908160ff168152505082600181518110611b4457611b43614720565b5b602001015160f81c60f81b60f81c816020019060ff16908160ff16815250506000806000806022870151935060428701519250606287015191506082870151905083856040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082856060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081856080018181525050808560a00181815250508495505050505050919050565b60008a8a604051602001611c2b929190614f45565b604051602081830303815290604052805190602001209050611c4b612384565b73ffffffffffffffffffffffffffffffffffffffff1663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b8152600401611c989b9a99989796959493929190615265565b602060405180830381865afa158015611cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd9919061534f565b611d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0f906153c8565b60405180910390fd5b5050505050505050505050565b611d2f82826123b5565b611d3761250c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611d5d61078a565b1115611d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d959061545a565b60405180910390fd5b611dac60ce61252283612538565b50505050565b6000611ded7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611de0612807565b611de8612811565b61281b565b905090565b600080838054905090506000808290506005831115611e68576000611e1684612855565b84611e2191906146ec565b905085611e2e888361294e565b60000160009054906101000a900463ffffffff1663ffffffff161115611e5657809150611e66565b600181611e63919061455a565b92505b505b5b80821015611ec8576000611e7d8383612963565b905085611e8a888361294e565b60000160009054906101000a900463ffffffff1663ffffffff161115611eb257809150611ec2565b600181611ebf919061455a565b92505b50611e69565b60008114611f1757611ee686600183611ee191906146ec565b61294e565b60000160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16611f1a565b60005b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935050505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fac906154ec565b60405180910390fd5b611fbf8282612989565b5050565b600060019054906101000a900460ff16612012576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612009906154ec565b60405180910390fd5b612051816040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506129fc565b50565b600060cc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006120c883610c7d565b905060006120d584610d37565b90508260cc60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a46121d1828483612a77565b50505050565b600063ffffffff8016821115612222576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122199061557e565b60405180910390fd5b819050919050565b60006bffffffffffffffffffffffff801682111561227d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227490615610565b60405180910390fd5b819050919050565b600081600001549050919050565b61229d8282612c70565b6122ab60ce612e3f83612538565b50505050565b60006122c46122be611db2565b83612e55565b9050919050565b60008060006122dc87878787612e88565b915091506122e981612f6a565b8192505050949350505050565b600080609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061234381612285565b915061234e816130d0565b50919050565b505050565b6123648383836130e6565b61237f61237084610c7d565b61237984610c7d565b83612a77565b505050565b6000807f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd260001b9050805491505090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241b9061567c565b60405180910390fd5b61243060008383612354565b8060356000828254612442919061455a565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516124f491906134d8565b60405180910390a361250860008383612359565b5050565b60006bffffffffffffffffffffffff8016905090565b60008183612530919061455a565b905092915050565b6000806000858054905090506000808214612607576125638760018461255e91906146ec565b61294e565b6040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525050612643565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152505b905080602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16935061267884868863ffffffff16565b9250600082118015612693575043816000015163ffffffff16145b1561270d576126a1836130eb565b6126b7886001856126b291906146ec565b61294e565b60000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1602179055506127fd565b866040518060400160405280612722436121d7565b63ffffffff168152602001612736866130eb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16021790555050505b5050935093915050565b6000606554905090565b6000606654905090565b6000838383463060405160200161283695949392919061569c565b6040516020818303038152906040528051906020012090509392505050565b60008082036128675760009050612949565b6000600161287484613156565b901c6001901b9050600181848161288e5761288d6156ef565b5b048201901c905060018184816128a7576128a66156ef565b5b048201901c905060018184816128c0576128bf6156ef565b5b048201901c905060018184816128d9576128d86156ef565b5b048201901c905060018184816128f2576128f16156ef565b5b048201901c9050600181848161290b5761290a6156ef565b5b048201901c90506001818481612924576129236156ef565b5b048201901c90506129458182858161293f5761293e6156ef565b5b04613237565b9150505b919050565b60008260005281602060002001905092915050565b60006002828418612974919061571e565b828416612981919061455a565b905092915050565b600060019054906101000a900460ff166129d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129cf906154ec565b60405180910390fd5b81603690816129e791906158f1565b5080603790816129f791906158f1565b505050565b600060019054906101000a900460ff16612a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a42906154ec565b60405180910390fd5b600082805190602001209050600082805190602001209050816065819055508060668190555050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612ab35750600081115b15612c6b57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612b9157600080612b3a60cd60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612e3f85612538565b915091508473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612b869291906159c3565b60405180910390a250505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612c6a57600080612c1360cd60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061252285612538565b915091508373ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612c5f9291906159c3565b60405180910390a250505b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd690615a5e565b60405180910390fd5b612ceb82600083612354565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6990615af0565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603560008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612e2691906134d8565b60405180910390a3612e3a83600084612359565b505050565b60008183612e4d91906146ec565b905092915050565b60008282604051602001612e6a929190615b88565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612ec3576000600391509150612f61565b600060018787878760405160008152602001604052604051612ee89493929190615bbf565b6020604051602081039080840390855afa158015612f0a573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612f5857600060019250925050612f61565b80600092509250505b94509492505050565b60006004811115612f7e57612f7d615c04565b5b816004811115612f9157612f90615c04565b5b03156130cd5760016004811115612fab57612faa615c04565b5b816004811115612fbe57612fbd615c04565b5b03612ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ff590615c7f565b60405180910390fd5b6002600481111561301257613011615c04565b5b81600481111561302557613024615c04565b5b03613065576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305c90615ceb565b60405180910390fd5b6003600481111561307957613078615c04565b5b81600481111561308c5761308b615c04565b5b036130cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c390615d7d565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b505050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff801682111561314e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161314590615e0f565b60405180910390fd5b819050919050565b600080600090506000608084901c111561317857608083901c92506080810190505b6000604084901c111561319357604083901c92506040810190505b6000602084901c11156131ae57602083901c92506020810190505b6000601084901c11156131c957601083901c92506010810190505b6000600884901c11156131e457600883901c92506008810190505b6000600484901c11156131ff57600483901c92506004810190505b6000600284901c111561321a57600283901c92506002810190505b6000600184901c111561322e576001810190505b80915050919050565b60008183106132465781613248565b825b905092915050565b6040518060400160405280600063ffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060c00160405280600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015613333578082015181840152602081019050613318565b60008484015250505050565b6000601f19601f8301169050919050565b600061335b826132f9565b6133658185613304565b9350613375818560208601613315565b61337e8161333f565b840191505092915050565b600060208201905081810360008301526133a38184613350565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133ea826133bf565b9050919050565b6133fa816133df565b811461340557600080fd5b50565b600081359050613417816133f1565b92915050565b6000819050919050565b6134308161341d565b811461343b57600080fd5b50565b60008135905061344d81613427565b92915050565b6000806040838503121561346a576134696133b5565b5b600061347885828601613408565b92505060206134898582860161343e565b9150509250929050565b60008115159050919050565b6134a881613493565b82525050565b60006020820190506134c3600083018461349f565b92915050565b6134d28161341d565b82525050565b60006020820190506134ed60008301846134c9565b92915050565b6000819050919050565b613506816134f3565b811461351157600080fd5b50565b600081359050613523816134fd565b92915050565b60006020828403121561353f5761353e6133b5565b5b600061354d84828501613514565b91505092915050565b60008060006060848603121561356f5761356e6133b5565b5b600061357d86828701613408565b935050602061358e86828701613408565b925050604061359f8682870161343e565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135eb8261333f565b810181811067ffffffffffffffff8211171561360a576136096135b3565b5b80604052505050565b600061361d6133ab565b905061362982826135e2565b919050565b600067ffffffffffffffff821115613649576136486135b3565b5b6136528261333f565b9050602081019050919050565b82818337600083830152505050565b600061368161367c8461362e565b613613565b90508281526020810184848401111561369d5761369c6135ae565b5b6136a884828561365f565b509392505050565b600082601f8301126136c5576136c46135a9565b5b81356136d584826020860161366e565b91505092915050565b600067ffffffffffffffff8211156136f9576136f86135b3565b5b602082029050602081019050919050565b600080fd5b600061372261371d846136de565b613613565b905080838252602082019050602084028301858111156137455761374461370a565b5b835b8181101561376e578061375a8882613514565b845260208401935050602081019050613747565b5050509392505050565b600082601f83011261378d5761378c6135a9565b5b813561379d84826020860161370f565b91505092915050565b600067ffffffffffffffff8211156137c1576137c06135b3565b5b602082029050602081019050919050565b6137db81613493565b81146137e657600080fd5b50565b6000813590506137f8816137d2565b92915050565b600061381161380c846137a6565b613613565b905080838252602082019050602084028301858111156138345761383361370a565b5b835b8181101561385d578061384988826137e9565b845260208401935050602081019050613836565b5050509392505050565b600082601f83011261387c5761387b6135a9565b5b813561388c8482602086016137fe565b91505092915050565b600067ffffffffffffffff8211156138b0576138af6135b3565b5b602082029050602081019050919050565b60006138d46138cf84613895565b613613565b905080838252602082019050602084028301858111156138f7576138f661370a565b5b835b81811015613920578061390c888261343e565b8452602084019350506020810190506138f9565b5050509392505050565b600082601f83011261393f5761393e6135a9565b5b813561394f8482602086016138c1565b91505092915050565b600067ffffffffffffffff821115613973576139726135b3565b5b602082029050602081019050919050565b600060ff82169050919050565b61399a81613984565b81146139a557600080fd5b50565b6000813590506139b781613991565b92915050565b60006139d06139cb84613958565b613613565b905080838252602082019050602084028301858111156139f3576139f261370a565b5b835b81811015613a1c5780613a0888826139a8565b8452602084019350506020810190506139f5565b5050509392505050565b600082601f830112613a3b57613a3a6135a9565b5b8135613a4b8482602086016139bd565b91505092915050565b6000806000806000806000806000806101408b8d031215613a7857613a776133b5565b5b60008b013567ffffffffffffffff811115613a9657613a956133ba565b5b613aa28d828e016136b0565b9a50506020613ab38d828e0161343e565b99505060408b013567ffffffffffffffff811115613ad457613ad36133ba565b5b613ae08d828e01613778565b98505060608b013567ffffffffffffffff811115613b0157613b006133ba565b5b613b0d8d828e01613867565b9750506080613b1e8d828e01613514565b96505060a0613b2f8d828e01613514565b95505060c08b013567ffffffffffffffff811115613b5057613b4f6133ba565b5b613b5c8d828e0161392a565b94505060e08b013567ffffffffffffffff811115613b7d57613b7c6133ba565b5b613b898d828e01613a26565b9350506101008b013567ffffffffffffffff811115613bab57613baa6133ba565b5b613bb78d828e01613778565b9250506101208b013567ffffffffffffffff811115613bd957613bd86133ba565b5b613be58d828e01613778565b9150509295989b9194979a5092959850565b613c0081613984565b82525050565b6000602082019050613c1b6000830184613bf7565b92915050565b613c2a816134f3565b82525050565b6000602082019050613c456000830184613c21565b92915050565b600067ffffffffffffffff821115613c6657613c656135b3565b5b613c6f8261333f565b9050602081019050919050565b6000613c8f613c8a84613c4b565b613613565b905082815260208101848484011115613cab57613caa6135ae565b5b613cb684828561365f565b509392505050565b600082601f830112613cd357613cd26135a9565b5b8135613ce3848260208601613c7c565b91505092915050565b60008060408385031215613d0357613d026133b5565b5b600083013567ffffffffffffffff811115613d2157613d206133ba565b5b613d2d85828601613cbe565b925050602083013567ffffffffffffffff811115613d4e57613d4d6133ba565b5b613d5a85828601613cbe565b9150509250929050565b600060208284031215613d7a57613d796133b5565b5b6000613d8884828501613408565b91505092915050565b613d9a816133df565b82525050565b6000602082019050613db56000830184613d91565b92915050565b600063ffffffff82169050919050565b613dd481613dbb565b82525050565b6000602082019050613def6000830184613dcb565b92915050565b60006bffffffffffffffffffffffff82169050919050565b613e1681613df5565b82525050565b6000602082019050613e316000830184613e0d565b92915050565b600060208284031215613e4d57613e4c6133b5565b5b6000613e5b8482850161343e565b91505092915050565b600080fd5b60008083601f840112613e7f57613e7e6135a9565b5b8235905067ffffffffffffffff811115613e9c57613e9b613e64565b5b602083019150836001820283011115613eb857613eb761370a565b5b9250929050565b600080600060408486031215613ed857613ed76133b5565b5b600084013567ffffffffffffffff811115613ef657613ef56133ba565b5b613f0286828701613e69565b93509350506020613f158682870161343e565b9150509250925092565b60008060008060008060c08789031215613f3c57613f3b6133b5565b5b6000613f4a89828a01613408565b9650506020613f5b89828a0161343e565b9550506040613f6c89828a0161343e565b9450506060613f7d89828a016139a8565b9350506080613f8e89828a01613514565b92505060a0613f9f89828a01613514565b9150509295509295509295565b600080600080600080600060e0888a031215613fcb57613fca6133b5565b5b6000613fd98a828b01613408565b9750506020613fea8a828b01613408565b9650506040613ffb8a828b0161343e565b955050606061400c8a828b0161343e565b945050608061401d8a828b016139a8565b93505060a061402e8a828b01613514565b92505060c061403f8a828b01613514565b91505092959891949750929550565b60008060408385031215614065576140646133b5565b5b600061407385828601613408565b925050602061408485828601613408565b9150509250929050565b60008083601f8401126140a4576140a36135a9565b5b8235905067ffffffffffffffff8111156140c1576140c0613e64565b5b6020830191508360018202830111156140dd576140dc61370a565b5b9250929050565b60008060008060008060008060c0898b031215614104576141036133b5565b5b600089013567ffffffffffffffff811115614122576141216133ba565b5b61412e8b828c01613e69565b985098505060206141418b828c0161343e565b965050604089013567ffffffffffffffff811115614162576141616133ba565b5b61416e8b828c0161408e565b955095505060606141818b828c016139a8565b93505060806141928b828c01613514565b92505060a06141a38b828c01613514565b9150509295985092959890939650565b6141bc81613dbb565b81146141c757600080fd5b50565b6000813590506141d9816141b3565b92915050565b600080604083850312156141f6576141f56133b5565b5b600061420485828601613408565b9250506020614215858286016141ca565b9150509250929050565b61422881613dbb565b82525050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b61425f8161422e565b82525050565b60408201600082015161427b600085018261421f565b50602082015161428e6020850182614256565b50505050565b60006040820190506142a96000830184614265565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806142f657607f821691505b602082108103614309576143086142af565b5b50919050565b7f45524332303a20696e76616c696420626561636f6e2068656967687400000000600082015250565b6000614345601c83613304565b91506143508261430f565b602082019050919050565b6000602082019050818103600083015261437481614338565b9050919050565b7f45524332303a20696e76616c696420696e737400000000000000000000000000600082015250565b60006143b1601383613304565b91506143bc8261437b565b602082019050919050565b600060208201905081810360008301526143e0816143a4565b9050919050565b7f45524332303a20696e76616c696420696e737427732064617461000000000000600082015250565b600061441d601a83613304565b9150614428826143e7565b602082019050919050565b6000602082019050818103600083015261444c81614410565b9050919050565b7f45524332303a20696e76616c696420746f6b656e000000000000000000000000600082015250565b6000614489601483613304565b915061449482614453565b602082019050919050565b600060208201905081810360008301526144b88161447c565b9050919050565b7f45524332303a20747820697320616c7265616479207573656400000000000000600082015250565b60006144f5601983613304565b9150614500826144bf565b602082019050919050565b60006020820190508181036000830152614524816144e8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145658261341d565b91506145708361341d565b92508282019050808211156145885761458761452b565b5b92915050565b7f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e656400600082015250565b60006145c4601f83613304565b91506145cf8261458e565b602082019050919050565b600060208201905081810360008301526145f3816145b7565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614656602e83613304565b9150614661826145fa565b604082019050919050565b6000602082019050818103600083015261468581614649565b9050919050565b6000819050919050565b6000819050919050565b60006146bb6146b66146b18461468c565b614696565b613984565b9050919050565b6146cb816146a0565b82525050565b60006020820190506146e660008301846146c2565b92915050565b60006146f78261341d565b91506147028361341d565b925082820390508181111561471a5761471961452b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006147ab602583613304565b91506147b68261474f565b604082019050919050565b600060208201905081810360008301526147da8161479e565b9050919050565b60006147ed8385613304565b93506147fa83858461365f565b6148038361333f565b840190509392505050565b60006060820190506148236000830187613d91565b81810360208301526148368185876147e1565b905061484560408301846134c9565b95945050505050565b7f4552433230566f7465733a207369676e61747572652065787069726564000000600082015250565b6000614884601d83613304565b915061488f8261484e565b602082019050919050565b600060208201905081810360008301526148b381614877565b9050919050565b60006080820190506148cf6000830187613c21565b6148dc6020830186613d91565b6148e960408301856134c9565b6148f660608301846134c9565b95945050505050565b7f4552433230566f7465733a20696e76616c6964206e6f6e636500000000000000600082015250565b6000614935601983613304565b9150614940826148ff565b602082019050919050565b6000602082019050818103600083015261496481614928565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006149a1601d83613304565b91506149ac8261496b565b602082019050919050565b600060208201905081810360008301526149d081614994565b9050919050565b600060c0820190506149ec6000830189613c21565b6149f96020830188613d91565b614a066040830187613d91565b614a1360608301866134c9565b614a2060808301856134c9565b614a2d60a08301846134c9565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000614a6e601e83613304565b9150614a7982614a38565b602082019050919050565b60006020820190508181036000830152614a9d81614a61565b9050919050565b600082825260208201905092915050565b6000614ac18385614aa4565b9350614ace83858461365f565b614ad78361333f565b840190509392505050565b60006060820190508181036000830152614afd8187896147e1565b9050614b0c60208301866134c9565b8181036040830152614b1f818486614ab5565b90509695505050505050565b7f45524332303a207369676e206461746120757365640000000000000000000000600082015250565b6000614b61601583613304565b9150614b6c82614b2b565b602082019050919050565b60006020820190508181036000830152614b9081614b54565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614bf3602483613304565b9150614bfe82614b97565b604082019050919050565b60006020820190508181036000830152614c2281614be6565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c85602283613304565b9150614c9082614c29565b604082019050919050565b60006020820190508181036000830152614cb481614c78565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000614cf1601d83613304565b9150614cfc82614cbb565b602082019050919050565b60006020820190508181036000830152614d2081614ce4565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614d83602583613304565b9150614d8e82614d27565b604082019050919050565b60006020820190508181036000830152614db281614d76565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614e15602383613304565b9150614e2082614db9565b604082019050919050565b60006020820190508181036000830152614e4481614e08565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614ea7602683613304565b9150614eb282614e4b565b604082019050919050565b60006020820190508181036000830152614ed681614e9a565b9050919050565b600081519050919050565b600081905092915050565b6000614efe82614edd565b614f088185614ee8565b9350614f18818560208601613315565b80840191505092915050565b6000819050919050565b614f3f614f3a8261341d565b614f24565b82525050565b6000614f518285614ef3565b9150614f5d8284614f2e565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614fa2816134f3565b82525050565b6000614fb48383614f99565b60208301905092915050565b6000602082019050919050565b6000614fd882614f6d565b614fe28185614f78565b9350614fed83614f89565b8060005b8381101561501e5781516150058882614fa8565b975061501083614fc0565b925050600181019050614ff1565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61506081613493565b82525050565b60006150728383615057565b60208301905092915050565b6000602082019050919050565b60006150968261502b565b6150a08185615036565b93506150ab83615047565b8060005b838110156150dc5781516150c38882615066565b97506150ce8361507e565b9250506001810190506150af565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61511e8161341d565b82525050565b60006151308383615115565b60208301905092915050565b6000602082019050919050565b6000615154826150e9565b61515e81856150f4565b935061516983615105565b8060005b8381101561519a5781516151818882615124565b975061518c8361513c565b92505060018101905061516d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6151dc81613984565b82525050565b60006151ee83836151d3565b60208301905092915050565b6000602082019050919050565b6000615212826151a7565b61521c81856151b2565b9350615227836151c3565b8060005b8381101561525857815161523f88826151e2565b975061524a836151fa565b92505060018101905061522b565b5085935050505092915050565b60006101608201905061527b600083018e61349f565b615288602083018d613c21565b615295604083018c6134c9565b81810360608301526152a7818b614fcd565b905081810360808301526152bb818a61508b565b90506152ca60a0830189613c21565b6152d760c0830188613c21565b81810360e08301526152e98187615149565b90508181036101008301526152fe8186615207565b90508181036101208301526153138185614fcd565b90508181036101408301526153288184614fcd565b90509c9b505050505050505050505050565b600081519050615349816137d2565b92915050565b600060208284031215615365576153646133b5565b5b60006153738482850161533a565b91505092915050565b7f45524332303a20696e76616c696420696e707574206d696e7420646174610000600082015250565b60006153b2601e83613304565b91506153bd8261537c565b602082019050919050565b600060208201905081810360008301526153e1816153a5565b9050919050565b7f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60008201527f766572666c6f77696e6720766f74657300000000000000000000000000000000602082015250565b6000615444603083613304565b915061544f826153e8565b604082019050919050565b6000602082019050818103600083015261547381615437565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006154d6602b83613304565b91506154e18261547a565b604082019050919050565b60006020820190508181036000830152615505816154c9565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203360008201527f3220626974730000000000000000000000000000000000000000000000000000602082015250565b6000615568602683613304565b91506155738261550c565b604082019050919050565b600060208201905081810360008301526155978161555b565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203960008201527f3620626974730000000000000000000000000000000000000000000000000000602082015250565b60006155fa602683613304565b91506156058261559e565b604082019050919050565b60006020820190508181036000830152615629816155ed565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000615666601f83613304565b915061567182615630565b602082019050919050565b6000602082019050818103600083015261569581615659565b9050919050565b600060a0820190506156b16000830188613c21565b6156be6020830187613c21565b6156cb6040830186613c21565b6156d860608301856134c9565b6156e56080830184613d91565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006157298261341d565b91506157348361341d565b925082615744576157436156ef565b5b828204905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026157b17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82615774565b6157bb8683615774565b95508019841693508086168417925050509392505050565b60006157ee6157e96157e48461341d565b614696565b61341d565b9050919050565b6000819050919050565b615808836157d3565b61581c615814826157f5565b848454615781565b825550505050565b600090565b615831615824565b61583c8184846157ff565b505050565b5b8181101561586057615855600082615829565b600181019050615842565b5050565b601f8211156158a5576158768161574f565b61587f84615764565b8101602085101561588e578190505b6158a261589a85615764565b830182615841565b50505b505050565b600082821c905092915050565b60006158c8600019846008026158aa565b1980831691505092915050565b60006158e183836158b7565b9150826002028217905092915050565b6158fa826132f9565b67ffffffffffffffff811115615913576159126135b3565b5b61591d82546142de565b615928828285615864565b600060209050601f83116001811461595b5760008415615949578287015190505b61595385826158d5565b8655506159bb565b601f1984166159698661574f565b60005b828110156159915784890151825560018201915060208501945060208101905061596c565b868310156159ae57848901516159aa601f8916826158b7565b8355505b6001600288020188555050505b505050505050565b60006040820190506159d860008301856134c9565b6159e560208301846134c9565b9392505050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615a48602183613304565b9150615a53826159ec565b604082019050919050565b60006020820190508181036000830152615a7781615a3b565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000615ada602283613304565b9150615ae582615a7e565b604082019050919050565b60006020820190508181036000830152615b0981615acd565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000615b51600283615b10565b9150615b5c82615b1b565b600282019050919050565b6000819050919050565b615b82615b7d826134f3565b615b67565b82525050565b6000615b9382615b44565b9150615b9f8285615b71565b602082019150615baf8284615b71565b6020820191508190509392505050565b6000608082019050615bd46000830187613c21565b615be16020830186613bf7565b615bee6040830185613c21565b615bfb6060830184613c21565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615c69601883613304565b9150615c7482615c33565b602082019050919050565b60006020820190508181036000830152615c9881615c5c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000615cd5601f83613304565b9150615ce082615c9f565b602082019050919050565b60006020820190508181036000830152615d0481615cc8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000615d67602283613304565b9150615d7282615d0b565b604082019050919050565b60006020820190508181036000830152615d9681615d5a565b9050919050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e203260008201527f3234206269747300000000000000000000000000000000000000000000000000602082015250565b6000615df9602783613304565b9150615e0482615d9d565b604082019050919050565b60006020820190508181036000830152615e2881615dec565b905091905056fea264697066735822122034bd34da874a778baedaebae92bd25171a469a3e412c98040cffe781889964e064736f6c63430008110033",
}

// PrvvoteABI is the input ABI used to generate the binding from.
// Deprecated: Use PrvvoteMetaData.ABI instead.
var PrvvoteABI = PrvvoteMetaData.ABI

// PrvvoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrvvoteMetaData.Bin instead.
var PrvvoteBin = PrvvoteMetaData.Bin

// DeployPrvvote deploys a new Ethereum contract, binding an instance of Prvvote to it.
func DeployPrvvote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Prvvote, error) {
	parsed, err := PrvvoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrvvoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// Prvvote is an auto generated Go binding around an Ethereum contract.
type Prvvote struct {
	PrvvoteCaller     // Read-only binding to the contract
	PrvvoteTransactor // Write-only binding to the contract
	PrvvoteFilterer   // Log filterer for contract events
}

// PrvvoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrvvoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrvvoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrvvoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrvvoteSession struct {
	Contract     *Prvvote          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvvoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrvvoteCallerSession struct {
	Contract *PrvvoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PrvvoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrvvoteTransactorSession struct {
	Contract     *PrvvoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PrvvoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrvvoteRaw struct {
	Contract *Prvvote // Generic contract binding to access the raw methods on
}

// PrvvoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrvvoteCallerRaw struct {
	Contract *PrvvoteCaller // Generic read-only contract binding to access the raw methods on
}

// PrvvoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrvvoteTransactorRaw struct {
	Contract *PrvvoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrvvote creates a new instance of Prvvote, bound to a specific deployed contract.
func NewPrvvote(address common.Address, backend bind.ContractBackend) (*Prvvote, error) {
	contract, err := bindPrvvote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// NewPrvvoteCaller creates a new read-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteCaller(address common.Address, caller bind.ContractCaller) (*PrvvoteCaller, error) {
	contract, err := bindPrvvote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteCaller{contract: contract}, nil
}

// NewPrvvoteTransactor creates a new write-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteTransactor(address common.Address, transactor bind.ContractTransactor) (*PrvvoteTransactor, error) {
	contract, err := bindPrvvote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransactor{contract: contract}, nil
}

// NewPrvvoteFilterer creates a new log filterer instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteFilterer(address common.Address, filterer bind.ContractFilterer) (*PrvvoteFilterer, error) {
	contract, err := bindPrvvote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrvvoteFilterer{contract: contract}, nil
}

// bindPrvvote binds a generic wrapper to an already deployed contract.
func bindPrvvote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrvvoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.PrvvoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Prvvote *PrvvoteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Prvvote *PrvvoteSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Prvvote *PrvvoteCallerSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetCurrentVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getCurrentVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteCaller) GetDataSign(opts *bind.CallOpts, _input [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getDataSign", _input)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteSession) GetDataSign(_input [32]byte) ([32]byte, error) {
	return _Prvvote.Contract.GetDataSign(&_Prvvote.CallOpts, _input)
}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) GetDataSign(_input [32]byte) ([32]byte, error) {
	return _Prvvote.Contract.GetDataSign(&_Prvvote.CallOpts, _input)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetPriorVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPriorVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "sigDataUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Prvvote.Contract.SigDataUsed(&_Prvvote.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Prvvote.Contract.SigDataUsed(&_Prvvote.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactor) BurnBySign(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burnBySign", incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteSession) BurnBySign(incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySign(&_Prvvote.TransactOpts, incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) BurnBySign(incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySign(&_Prvvote.TransactOpts, incognitoAddress, amount, timestamp, v, r, s)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "initialize", name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactorSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// PrvvoteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Prvvote contract.
type PrvvoteApprovalIterator struct {
	Event *PrvvoteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteApproval represents a Approval event raised by the Prvvote contract.
type PrvvoteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PrvvoteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteApprovalIterator{contract: _Prvvote.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PrvvoteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteApproval)
				if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseApproval(log types.Log) (*PrvvoteApproval, error) {
	event := new(PrvvoteApproval)
	if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the Prvvote contract.
type PrvvoteDelegateChangedIterator struct {
	Event *PrvvoteDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateChanged represents a DelegateChanged event raised by the Prvvote contract.
type PrvvoteDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*PrvvoteDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateChangedIterator{contract: _Prvvote.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) ParseDelegateChanged(log types.Log) (*PrvvoteDelegateChanged, error) {
	event := new(PrvvoteDelegateChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the Prvvote contract.
type PrvvoteDelegateVotesChangedIterator struct {
	Event *PrvvoteDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateVotesChanged represents a DelegateVotesChanged event raised by the Prvvote contract.
type PrvvoteDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*PrvvoteDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateVotesChangedIterator{contract: _Prvvote.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateVotesChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) ParseDelegateVotesChanged(log types.Log) (*PrvvoteDelegateVotesChanged, error) {
	event := new(PrvvoteDelegateVotesChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Prvvote contract.
type PrvvoteDepositIterator struct {
	Event *PrvvoteDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDeposit represents a Deposit event raised by the Prvvote contract.
type PrvvoteDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterDeposit(opts *bind.FilterOpts) (*PrvvoteDepositIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PrvvoteDepositIterator{contract: _Prvvote.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PrvvoteDeposit) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDeposit)
				if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseDeposit(log types.Log) (*PrvvoteDeposit, error) {
	event := new(PrvvoteDeposit)
	if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Prvvote contract.
type PrvvoteInitializedIterator struct {
	Event *PrvvoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteInitialized represents a Initialized event raised by the Prvvote contract.
type PrvvoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*PrvvoteInitializedIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PrvvoteInitializedIterator{contract: _Prvvote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PrvvoteInitialized) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteInitialized)
				if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) ParseInitialized(log types.Log) (*PrvvoteInitialized, error) {
	event := new(PrvvoteInitialized)
	if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Prvvote contract.
type PrvvoteMigrateIterator struct {
	Event *PrvvoteMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteMigrate represents a Migrate event raised by the Prvvote contract.
type PrvvoteMigrate struct {
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterMigrate(opts *bind.FilterOpts) (*PrvvoteMigrateIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &PrvvoteMigrateIterator{contract: _Prvvote.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *PrvvoteMigrate) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteMigrate)
				if err := _Prvvote.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrate is a log parse operation binding the contract event 0xd5837b673ffaac69230366d3f7eb7cb2ba2b9fd8f2d4e9d0f5e92d3756b1d546.
//
// Solidity: event Migrate(uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseMigrate(log types.Log) (*PrvvoteMigrate, error) {
	event := new(PrvvoteMigrate)
	if err := _Prvvote.contract.UnpackLog(event, "Migrate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Prvvote contract.
type PrvvoteTransferIterator struct {
	Event *PrvvoteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteTransfer represents a Transfer event raised by the Prvvote contract.
type PrvvoteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PrvvoteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransferIterator{contract: _Prvvote.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PrvvoteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteTransfer)
				if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseTransfer(log types.Log) (*PrvvoteTransfer, error) {
	event := new(PrvvoteTransfer)
	if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
