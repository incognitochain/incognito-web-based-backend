// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package prvvote

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ERC20VotesUpgradeableCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesUpgradeableCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// PrvvoteMetaData contains all meta data concerning the Prvvote contract.
var PrvvoteMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"redepositIncAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"}],\"name\":\"Redeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"timestamp\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"burnBySign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"itx\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"burnBySignUnShieldTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20VotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_input\",\"type\":\"bytes32\"}],\"name\":\"getDataSign\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"heights\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"instPaths\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32\",\"name\":\"instRoots\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"sigIdxs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigVs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigRs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigSs\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"reDepositInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"redepositIncAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061347a806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637ecebe001161010f578063c3cda520116100a2578063ec97cad411610071578063ec97cad414610477578063ed97383a14610498578063f1127ed8146104ab578063f7d25dc0146104e857600080fd5b8063c3cda5201461042b578063cc50aa5c1461043e578063d505accf14610451578063dd62ed3e1461046457600080fd5b8063a457c2d7116100de578063a457c2d7146103df578063a9059cbb146103f2578063b48272cc14610405578063b4b5ea571461041857600080fd5b80637ecebe001461039e5780638e539e8c146103b157806395d89b41146103c45780639ab24eb0146103cc57600080fd5b806339509351116101875780635c19a95c116101565780635c19a95c1461030f5780636fcfff451461032257806370a082311461034a578063782d6fe11461037357600080fd5b806339509351146102a95780633a46b1a8146102bc5780634cd88b76146102cf578063587cde1e146102e457600080fd5b806323b872dd116101c357806323b872dd1461026c57806324f178ff1461027f578063313ce567146102925780633644e515146102a157600080fd5b806306fdde03146101f5578063095ea7b31461021357806318160ddd146102365780631ea1940e14610248575b600080fd5b6101fd6104fb565b60405161020a91906127f4565b60405180910390f35b61022661022136600461281c565b61058d565b604051901515815260200161020a565b6035545b60405190815260200161020a565b610226610256366004612848565b6101306020526000908152604090205460ff1681565b61022661027a366004612861565b6105a7565b61022661028d366004612aab565b6105cb565b6040516009815260200161020a565b61023a610865565b6102266102b736600461281c565b610874565b61023a6102ca36600461281c565b610896565b6102e26102dd366004612c62565b610910565b005b6102f76102f2366004612cc6565b610a4f565b6040516001600160a01b03909116815260200161020a565b6102e261031d366004612cc6565b610a92565b610335610330366004612cc6565b610a9f565b60405163ffffffff909116815260200161020a565b61023a610358366004612cc6565b6001600160a01b031660009081526033602052604090205490565b61038661038136600461281c565b610ac1565b6040516001600160601b03909116815260200161020a565b61023a6103ac366004612cc6565b610ad5565b61023a6103bf366004612848565b610af3565b6101fd610b4f565b61023a6103da366004612cc6565b610b5e565b6102266103ed36600461281c565b610be5565b61022661040036600461281c565b610c60565b610226610413366004612ce3565b610c6e565b610386610426366004612cc6565b610cc1565b6102e2610439366004612d2f565b610ccf565b61022661044c366004612d89565b610e06565b6102e261045f366004612dc4565b61102a565b61023a610472366004612e32565b61118e565b61048a610485366004612848565b6111b9565b60405161020a929190612e6b565b6102266104a6366004612e8d565b61125e565b6104be6104b9366004612f2a565b61135a565b60408051825163ffffffff1681526020928301516001600160e01b0316928101929092520161020a565b61023a6104f6366004612848565b6113de565b60606036805461050a90612f61565b80601f016020809104026020016040519081016040528092919081815260200182805461053690612f61565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b5050505050905090565b60003361059b8185856113e9565b60019150505b92915050565b6000336105b585828561150d565b6105c0858585611587565b506001949350505050565b60006101078b101561061a5760405162461bcd60e51b8152602060048201526013602482015272115490cc8c0e881a5b9d985b1a59081a5b9cdd606a1b60448201526064015b60405180910390fd5b60006106268d8d611738565b805190915060ff1660a41480156106445750806020015160ff166001145b6106905760405162461bcd60e51b815260206004820152601a60248201527f45524332303a20696e76616c696420696e7374277320646174610000000000006044820152606401610611565b60408101516001600160a01b031630146106e35760405162461bcd60e51b815260206004820152601460248201527322a92199181d1034b73b30b634b2103a37b5b2b760611b6044820152606401610611565b60a08101516000908152610132602052604090205460ff16156107485760405162461bcd60e51b815260206004820152601960248201527f45524332303a20747820697320616c72656164792075736564000000000000006044820152606401610611565b60a081015160009081526101326020908152604091829020805460ff191660011790558151601f8f018290048202810182019092528d82526107b091908f908f90819084018382808284376000920191909152508f92508e91508d90508c8c8c8c8c8c611877565b6107c2816060015182608001516119a6565b60405180604001604052808260c0015181526020018260800151815250610131600083606001518460a001516040516020016108139291906001600160a01b03929092168252602082015260400190565b60408051601f19818403018152918152815160209283012083529082019290925201600020815181906108469082612fe3565b50602091909101516001918201559d9c50505050505050505050505050565b600061086f611a30565b905090565b60003361059b818585610887838361118e565b61089191906130b9565b6113e9565b60004382106108e75760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610611565b6001600160a01b038316600090815260cd602052604090206109099083611aab565b9392505050565b600054610100900460ff16158080156109305750600054600160ff909116105b8061094a5750303b15801561094a575060005460ff166001145b6109ad5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610611565b6000805460ff1916600117905580156109d0576000805461ff0019166101001790555b6109da8383611ba2565b610a0460405180604001604052806009815260200168507276566f74696e6760b81b815250611bd7565b8015610a4a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600080610a74836001600160a01b03908116600090815260cc60205260409020541690565b90506001600160a01b03811615610a8b5780610909565b5090919050565b610a9c3382611c21565b50565b6001600160a01b038116600090815260cd60205260408120546105a190611cb7565b6000610909610ad08484610896565b611d20565b6001600160a01b0381166000908152609960205260408120546105a1565b6000438210610b445760405162461bcd60e51b815260206004820152601f60248201527f4552433230566f7465733a20626c6f636b206e6f7420796574206d696e6564006044820152606401610611565b6105a160ce83611aab565b60606037805461050a90612f61565b6001600160a01b038116600090815260cd60205260408120548015610bd2576001600160a01b038316600090815260cd60205260409020610ba06001836130cc565b81548110610bb057610bb06130df565b60009182526020909120015464010000000090046001600160e01b0316610bd5565b60005b6001600160e01b03169392505050565b60003381610bf3828661118e565b905083811015610c535760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610611565b6105c082868684036113e9565b60003361059b818585611587565b6000610c7a3383611d88565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e30858585604051610caf949392919061311e565b60405180910390a15060019392505050565b60006105a1610ad083610b5e565b83421115610d1f5760405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606401610611565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b038816918101919091526060810186905260808101859052600090610d9a90610d929060a0015b60405160208183030381529060405280519060200120611da0565b858585611dee565b9050610da581611e16565b8614610df35760405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606401610611565b610dfd8188611c21565b50505050505050565b6000848152610130602052604081205460ff1615610e5e5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c0e881cda59db8819185d18481d5cd959605a1b6044820152606401610611565b6000610e6c86868686611dee565b600087815261013060209081526040808320805460ff1916600117905580516001600160a01b03851692810192909252810189905291925090610131908290606001604051602081830303815290604052805190602001208152602001908152602001600020604051806040016040529081600082018054610eed90612f61565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1990612f61565b8015610f665780601f10610f3b57610100808354040283529160200191610f66565b820191906000526020600020905b815481529060010190602001808311610f4957829003601f168201915b5050505050815260200160018201548152505090506000816020015111610fcf5760405162461bcd60e51b815260206004820152601e60248201527f45524332303a20696e76616c69642072654465706f7369742076616c756500006044820152606401610611565b610fdd828260200151611d88565b805160208201516040517eb45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d926110159230928c90613154565b60405180910390a15060019695505050505050565b8342111561107a5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610611565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886110a98c611e16565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061110482611da0565b9050600061111482878787611dee565b9050896001600160a01b0316816001600160a01b0316146111775760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610611565b6111828a8a8a6113e9565b50505050505050505050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b610131602052600090815260409020805481906111d590612f61565b80601f016020809104026020016040519081016040528092919081815260200182805461120190612f61565b801561124e5780601f106112235761010080835404028352916020019161124e565b820191906000526020600020905b81548152906001019060200180831161123157829003601f168201915b5050505050908060010154905082565b60008061127d8a8a8a8a8a604051602001610d7795949392919061318b565b6000818152610130602052604090205490915060ff16156112d85760405162461bcd60e51b8152602060048201526015602482015274115490cc8c0e881cda59db8819185d18481d5cd959605a1b6044820152606401610611565b60006112e682878787611dee565b600083815261013060205260409020805460ff19166001179055905061130c818a611d88565b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e308c8c8c604051611341949392919061311e565b60405180910390a15060019a9950505050505050505050565b60408051808201909152600080825260208201526001600160a01b038316600090815260cd60205260409020805463ffffffff841690811061139e5761139e6130df565b60009182526020918290206040805180820190915291015463ffffffff8116825264010000000090046001600160e01b0316918101919091529392505050565b60006105a182611da0565b6001600160a01b03831661144b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610611565b6001600160a01b0382166114ac5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610611565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611519848461118e565b9050600019811461158157818110156115745760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610611565b61158184848484036113e9565b50505050565b6001600160a01b0383166115eb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610611565b6001600160a01b03821661164d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610611565b6001600160a01b038316600090815260336020526040902054818110156116c55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610611565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906117259086815260200190565b60405180910390a3611581848484611e3e565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c08101919091526040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810191909152838360008181106117c1576117c16130df565b919091013560f81c825250838360018181106117df576117df6130df565b919091013560f81c6020830152506117fb6082600285876131c4565b81019061180891906131ee565b60a085015260808401526001600160a01b03908116606084015216604082015261183761010760a285876131c4565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060c08201529392505050565b60008a8a60405160200161188c92919061321f565b6040516020818303038152906040528051906020012090506118cc7f62135fc083646fdb4e1a9d700e351b886a4a5a39da980650269edd1ade91ffd25490565b6001600160a01b031663f65d21166001838d8d8d8d8d8d8d8d8d6040518c63ffffffff1660e01b815260040161190c9b9a999897969594939291906132e1565b602060405180830381865afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d919061338e565b6119995760405162461bcd60e51b815260206004820152601e60248201527f45524332303a20696e76616c696420696e707574206d696e74206461746100006044820152606401610611565b5050505050505050505050565b6119b08282611e59565b6035546001600160601b031015611a225760405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608401610611565b61158160ce611f2283611f2e565b600061086f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611a5f60655490565b6066546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b815460009081816005811115611b05576000611ac684612082565b611ad090856130cc565b600088815260209020909150869082015463ffffffff161115611af557809150611b03565b611b008160016130b9565b92505b505b80821015611b52576000611b19838361216a565b600088815260209020909150869082015463ffffffff161115611b3e57809150611b4c565b611b498160016130b9565b92505b50611b05565b8015611b8c57611b7586611b676001846130cc565b600091825260209091200190565b5464010000000090046001600160e01b0316611b8f565b60005b6001600160e01b03169695505050505050565b600054610100900460ff16611bc95760405162461bcd60e51b8152600401610611906133ab565b611bd38282612185565b5050565b600054610100900460ff16611bfe5760405162461bcd60e51b8152600401610611906133ab565b610a9c81604051806040016040528060018152602001603160f81b8152506121c5565b6000611c2c83610a4f565b90506000611c4f846001600160a01b031660009081526033602052604090205490565b6001600160a01b03858116600081815260cc602052604080822080546001600160a01b031916898616908117909155905194955093928616927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611581828483612206565b600063ffffffff821115611d1c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610611565b5090565b60006001600160601b03821115611d1c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203960448201526536206269747360d01b6064820152608401610611565b611d928282612343565b61158160ce61247e83611f2e565b60006105a1611dad611a30565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611dff8787878761248a565b91509150611e0c8161254e565b5095945050505050565b6001600160a01b03811660009081526099602052604090208054600181018255905b50919050565b610a4a611e4a84610a4f565b611e5384610a4f565b83612206565b6001600160a01b038216611eaf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610611565b8060356000828254611ec191906130b9565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611bd360008383611e3e565b600061090982846130b9565b82546000908190818115611f7b57611f4b87611b676001856130cc565b60408051808201909152905463ffffffff8116825264010000000090046001600160e01b03166020820152611f90565b60408051808201909152600080825260208201525b905080602001516001600160e01b03169350611fb084868863ffffffff16565b9250600082118015611fc85750805163ffffffff1643145b1561200d57611fd683612698565b611fe588611b676001866130cc565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055612078565b86604051806040016040528061202243611cb7565b63ffffffff16815260200161203686612698565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b5050935093915050565b60008160000361209457506000919050565b600060016120a184612701565b901c6001901b905060018184816120ba576120ba6133f6565b048201901c905060018184816120d2576120d26133f6565b048201901c905060018184816120ea576120ea6133f6565b048201901c90506001818481612102576121026133f6565b048201901c9050600181848161211a5761211a6133f6565b048201901c90506001818481612132576121326133f6565b048201901c9050600181848161214a5761214a6133f6565b048201901c905061090981828581612164576121646133f6565b04612795565b6000612179600284841861340c565b610909908484166130b9565b600054610100900460ff166121ac5760405162461bcd60e51b8152600401610611906133ab565b60366121b88382612fe3565b506037610a4a8282612fe3565b600054610100900460ff166121ec5760405162461bcd60e51b8152600401610611906133ab565b815160209283012081519190920120606591909155606655565b816001600160a01b0316836001600160a01b0316141580156122285750600081115b15610a4a576001600160a01b038316156122b6576001600160a01b038316600090815260cd6020526040812081906122639061247e85611f2e565b91509150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72483836040516122ab929190918252602082015260400190565b60405180910390a250505b6001600160a01b03821615610a4a576001600160a01b038216600090815260cd6020526040812081906122ec90611f2285611f2e565b91509150836001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051612334929190918252602082015260400190565b60405180910390a25050505050565b6001600160a01b0382166123a35760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610611565b6001600160a01b038216600090815260336020526040902054818110156124175760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610611565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610a4a83600084611e3e565b600061090982846130cc565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156124c15750600090506003612545565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612515573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661253e57600060019250925050612545565b9150600090505b94509492505050565b60008160048111156125625761256261342e565b0361256a5750565b600181600481111561257e5761257e61342e565b036125cb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610611565b60028160048111156125df576125df61342e565b0361262c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610611565b60038160048111156126405761264061342e565b03610a9c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610611565b60006001600160e01b03821115611d1c5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610611565b600080608083901c1561271657608092831c92015b604083901c1561272857604092831c92015b602083901c1561273a57602092831c92015b601083901c1561274c57601092831c92015b600883901c1561275e57600892831c92015b600483901c1561277057600492831c92015b600283901c1561278257600292831c92015b600183901c156105a15760010192915050565b6000818310610a8b5781610909565b60005b838110156127bf5781810151838201526020016127a7565b50506000910152565b600081518084526127e08160208601602086016127a4565b601f01601f19169290920160200192915050565b60208152600061090960208301846127c8565b6001600160a01b0381168114610a9c57600080fd5b6000806040838503121561282f57600080fd5b823561283a81612807565b946020939093013593505050565b60006020828403121561285a57600080fd5b5035919050565b60008060006060848603121561287657600080fd5b833561288181612807565b9250602084013561289181612807565b929592945050506040919091013590565b60008083601f8401126128b457600080fd5b50813567ffffffffffffffff8111156128cc57600080fd5b6020830191508360208285010111156128e457600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561292a5761292a6128eb565b604052919050565b600067ffffffffffffffff82111561294c5761294c6128eb565b5060051b60200190565b600082601f83011261296757600080fd5b8135602061297c61297783612932565b612901565b82815260059290921b8401810191818101908684111561299b57600080fd5b8286015b848110156129b6578035835291830191830161299f565b509695505050505050565b8015158114610a9c57600080fd5b600082601f8301126129e057600080fd5b813560206129f061297783612932565b82815260059290921b84018101918181019086841115612a0f57600080fd5b8286015b848110156129b6578035612a26816129c1565b8352918301918301612a13565b803560ff81168114612a4457600080fd5b919050565b600082601f830112612a5a57600080fd5b81356020612a6a61297783612932565b82815260059290921b84018101918181019086841115612a8957600080fd5b8286015b848110156129b657612a9e81612a33565b8352918301918301612a8d565b60008060008060008060008060008060006101408c8e031215612acd57600080fd5b67ffffffffffffffff808d351115612ae457600080fd5b612af18e8e358f016128a2565b909c509a5060208d0135995060408d0135811015612b0e57600080fd5b612b1e8e60408f01358f01612956565b98508060608e01351115612b3157600080fd5b612b418e60608f01358f016129cf565b975060808d0135965060a08d013595508060c08e01351115612b6257600080fd5b612b728e60c08f01358f01612956565b94508060e08e01351115612b8557600080fd5b612b958e60e08f01358f01612a49565b9350806101008e01351115612ba957600080fd5b612bba8e6101008f01358f01612956565b9250806101208e01351115612bce57600080fd5b50612be08d6101208e01358e01612956565b90509295989b509295989b9093969950565b600082601f830112612c0357600080fd5b813567ffffffffffffffff811115612c1d57612c1d6128eb565b612c30601f8201601f1916602001612901565b818152846020838601011115612c4557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612c7557600080fd5b823567ffffffffffffffff80821115612c8d57600080fd5b612c9986838701612bf2565b93506020850135915080821115612caf57600080fd5b50612cbc85828601612bf2565b9150509250929050565b600060208284031215612cd857600080fd5b813561090981612807565b600080600060408486031215612cf857600080fd5b833567ffffffffffffffff811115612d0f57600080fd5b612d1b868287016128a2565b909790965060209590950135949350505050565b60008060008060008060c08789031215612d4857600080fd5b8635612d5381612807565b95506020870135945060408701359350612d6f60608801612a33565b92506080870135915060a087013590509295509295509295565b60008060008060808587031215612d9f57600080fd5b84359350612daf60208601612a33565b93969395505050506040820135916060013590565b600080600080600080600060e0888a031215612ddf57600080fd5b8735612dea81612807565b96506020880135612dfa81612807565b95506040880135945060608801359350612e1660808901612a33565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215612e4557600080fd5b8235612e5081612807565b91506020830135612e6081612807565b809150509250929050565b604081526000612e7e60408301856127c8565b90508260208301529392505050565b60008060008060008060008060c0898b031215612ea957600080fd5b883567ffffffffffffffff80821115612ec157600080fd5b612ecd8c838d016128a2565b909a50985060208b0135975060408b0135915080821115612eed57600080fd5b50612efa8b828c016128a2565b9096509450612f0d905060608a01612a33565b92506080890135915060a089013590509295985092959890939650565b60008060408385031215612f3d57600080fd5b8235612f4881612807565b9150602083013563ffffffff81168114612e6057600080fd5b600181811c90821680612f7557607f821691505b602082108103611e3857634e487b7160e01b600052602260045260246000fd5b601f821115610a4a57600081815260208120601f850160051c81016020861015612fbc5750805b601f850160051c820191505b81811015612fdb57828155600101612fc8565b505050505050565b815167ffffffffffffffff811115612ffd57612ffd6128eb565b6130118161300b8454612f61565b84612f95565b602080601f831160018114613046576000841561302e5750858301515b600019600386901b1c1916600185901b178555612fdb565b600085815260208120601f198616915b8281101561307557888601518255948401946001909101908401613056565b50858210156130935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808201808211156105a1576105a16130a3565b818103818111156105a1576105a16130a3565b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038516815260606020820181905260009061314390830185876130f5565b905082604083015295945050505050565b6001600160a01b0385168152608060208201819052600090613178908301866127c8565b6040830194909452506060015292915050565b60608152600061319f6060830187896130f5565b85602084015282810360408401526131b88185876130f5565b98975050505050505050565b600080858511156131d457600080fd5b838611156131e157600080fd5b5050820193919092039150565b6000806000806080858703121561320457600080fd5b843561320f81612807565b93506020850135612daf81612807565b600083516132318184602088016127a4565b9190910191825250602001919050565b600081518084526020808501945080840160005b8381101561327157815187529582019590820190600101613255565b509495945050505050565b600081518084526020808501945080840160005b83811015613271578151151587529582019590820190600101613290565b600081518084526020808501945080840160005b8381101561327157815160ff16875295820195908201906001016132c2565b60006101608d151583528c60208401528b60408401528060608401526133098184018c613241565b9050828103608084015261331d818b61327c565b90508860a08401528760c084015282810360e084015261333d8188613241565b905082810361010084015261335281876132ae565b90508281036101208401526133678186613241565b905082810361014084015261337c8185613241565b9e9d5050505050505050505050505050565b6000602082840312156133a057600080fd5b8151610909816129c1565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261342957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fdfea264697066735822122094baadc2d7faec0b53a30fe0d7a886aff91b577886b5bc629a788efdc3dd0ed064736f6c63430008110033",
}

// PrvvoteABI is the input ABI used to generate the binding from.
// Deprecated: Use PrvvoteMetaData.ABI instead.
var PrvvoteABI = PrvvoteMetaData.ABI

// PrvvoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrvvoteMetaData.Bin instead.
var PrvvoteBin = PrvvoteMetaData.Bin

// DeployPrvvote deploys a new Ethereum contract, binding an instance of Prvvote to it.
func DeployPrvvote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Prvvote, error) {
	parsed, err := PrvvoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrvvoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// Prvvote is an auto generated Go binding around an Ethereum contract.
type Prvvote struct {
	PrvvoteCaller     // Read-only binding to the contract
	PrvvoteTransactor // Write-only binding to the contract
	PrvvoteFilterer   // Log filterer for contract events
}

// PrvvoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrvvoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrvvoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrvvoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrvvoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrvvoteSession struct {
	Contract     *Prvvote          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrvvoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrvvoteCallerSession struct {
	Contract *PrvvoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PrvvoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrvvoteTransactorSession struct {
	Contract     *PrvvoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PrvvoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrvvoteRaw struct {
	Contract *Prvvote // Generic contract binding to access the raw methods on
}

// PrvvoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrvvoteCallerRaw struct {
	Contract *PrvvoteCaller // Generic read-only contract binding to access the raw methods on
}

// PrvvoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrvvoteTransactorRaw struct {
	Contract *PrvvoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrvvote creates a new instance of Prvvote, bound to a specific deployed contract.
func NewPrvvote(address common.Address, backend bind.ContractBackend) (*Prvvote, error) {
	contract, err := bindPrvvote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Prvvote{PrvvoteCaller: PrvvoteCaller{contract: contract}, PrvvoteTransactor: PrvvoteTransactor{contract: contract}, PrvvoteFilterer: PrvvoteFilterer{contract: contract}}, nil
}

// NewPrvvoteCaller creates a new read-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteCaller(address common.Address, caller bind.ContractCaller) (*PrvvoteCaller, error) {
	contract, err := bindPrvvote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteCaller{contract: contract}, nil
}

// NewPrvvoteTransactor creates a new write-only instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteTransactor(address common.Address, transactor bind.ContractTransactor) (*PrvvoteTransactor, error) {
	contract, err := bindPrvvote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransactor{contract: contract}, nil
}

// NewPrvvoteFilterer creates a new log filterer instance of Prvvote, bound to a specific deployed contract.
func NewPrvvoteFilterer(address common.Address, filterer bind.ContractFilterer) (*PrvvoteFilterer, error) {
	contract, err := bindPrvvote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrvvoteFilterer{contract: contract}, nil
}

// bindPrvvote binds a generic wrapper to an already deployed contract.
func bindPrvvote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrvvoteABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.PrvvoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.PrvvoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Prvvote *PrvvoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Prvvote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Prvvote *PrvvoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Prvvote *PrvvoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Prvvote.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _Prvvote.Contract.DOMAINSEPARATOR(&_Prvvote.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Allowance(&_Prvvote.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.BalanceOf(&_Prvvote.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesUpgradeableCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesUpgradeableCheckpoint)).(*ERC20VotesUpgradeableCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_Prvvote *PrvvoteCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesUpgradeableCheckpoint, error) {
	return _Prvvote.Contract.Checkpoints(&_Prvvote.CallOpts, account, pos)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Prvvote *PrvvoteCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Prvvote *PrvvoteSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Prvvote *PrvvoteCallerSession) Decimals() (uint8, error) {
	return _Prvvote.Contract.Decimals(&_Prvvote.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_Prvvote *PrvvoteCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _Prvvote.Contract.Delegates(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetCurrentVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getCurrentVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetCurrentVotes(&_Prvvote.CallOpts, account)
}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteCaller) GetDataSign(opts *bind.CallOpts, _input [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getDataSign", _input)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteSession) GetDataSign(_input [32]byte) ([32]byte, error) {
	return _Prvvote.Contract.GetDataSign(&_Prvvote.CallOpts, _input)
}

// GetDataSign is a free data retrieval call binding the contract method 0xf7d25dc0.
//
// Solidity: function getDataSign(bytes32 _input) view returns(bytes32)
func (_Prvvote *PrvvoteCallerSession) GetDataSign(_input [32]byte) ([32]byte, error) {
	return _Prvvote.Contract.GetDataSign(&_Prvvote.CallOpts, _input)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastTotalSupply(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastTotalSupply", blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastTotalSupply(blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastTotalSupply(&_Prvvote.CallOpts, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPastVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 blockNumber) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetPastVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPastVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCaller) GetPriorVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getPriorVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_Prvvote *PrvvoteCallerSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _Prvvote.Contract.GetPriorVotes(&_Prvvote.CallOpts, account, blockNumber)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _Prvvote.Contract.GetVotes(&_Prvvote.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Name() (string, error) {
	return _Prvvote.Contract.Name(&_Prvvote.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _Prvvote.Contract.Nonces(&_Prvvote.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_Prvvote *PrvvoteCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _Prvvote.Contract.NumCheckpoints(&_Prvvote.CallOpts, account)
}

// ReDepositInfo is a free data retrieval call binding the contract method 0xec97cad4.
//
// Solidity: function reDepositInfo(bytes32 ) view returns(bytes redepositIncAddress, uint256 amount)
func (_Prvvote *PrvvoteCaller) ReDepositInfo(opts *bind.CallOpts, arg0 [32]byte) (struct {
	RedepositIncAddress []byte
	Amount              *big.Int
}, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "reDepositInfo", arg0)

	outstruct := new(struct {
		RedepositIncAddress []byte
		Amount              *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RedepositIncAddress = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ReDepositInfo is a free data retrieval call binding the contract method 0xec97cad4.
//
// Solidity: function reDepositInfo(bytes32 ) view returns(bytes redepositIncAddress, uint256 amount)
func (_Prvvote *PrvvoteSession) ReDepositInfo(arg0 [32]byte) (struct {
	RedepositIncAddress []byte
	Amount              *big.Int
}, error) {
	return _Prvvote.Contract.ReDepositInfo(&_Prvvote.CallOpts, arg0)
}

// ReDepositInfo is a free data retrieval call binding the contract method 0xec97cad4.
//
// Solidity: function reDepositInfo(bytes32 ) view returns(bytes redepositIncAddress, uint256 amount)
func (_Prvvote *PrvvoteCallerSession) ReDepositInfo(arg0 [32]byte) (struct {
	RedepositIncAddress []byte
	Amount              *big.Int
}, error) {
	return _Prvvote.Contract.ReDepositInfo(&_Prvvote.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "sigDataUsed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Prvvote.Contract.SigDataUsed(&_Prvvote.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) view returns(bool)
func (_Prvvote *PrvvoteCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Prvvote.Contract.SigDataUsed(&_Prvvote.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Prvvote *PrvvoteCallerSession) Symbol() (string, error) {
	return _Prvvote.Contract.Symbol(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Prvvote.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Prvvote *PrvvoteCallerSession) TotalSupply() (*big.Int, error) {
	return _Prvvote.Contract.TotalSupply(&_Prvvote.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Approve(&_Prvvote.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Burn(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burn", incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb48272cc.
//
// Solidity: function burn(string incognitoAddress, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Burn(incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Burn(&_Prvvote.TransactOpts, incognitoAddress, amount)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactor) BurnBySign(opts *bind.TransactOpts, incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burnBySign", incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteSession) BurnBySign(incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySign(&_Prvvote.TransactOpts, incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySign is a paid mutator transaction binding the contract method 0xed97383a.
//
// Solidity: function burnBySign(string incognitoAddress, uint256 amount, bytes timestamp, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) BurnBySign(incognitoAddress string, amount *big.Int, timestamp []byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySign(&_Prvvote.TransactOpts, incognitoAddress, amount, timestamp, v, r, s)
}

// BurnBySignUnShieldTx is a paid mutator transaction binding the contract method 0xcc50aa5c.
//
// Solidity: function burnBySignUnShieldTx(bytes32 itx, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactor) BurnBySignUnShieldTx(opts *bind.TransactOpts, itx [32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "burnBySignUnShieldTx", itx, v, r, s)
}

// BurnBySignUnShieldTx is a paid mutator transaction binding the contract method 0xcc50aa5c.
//
// Solidity: function burnBySignUnShieldTx(bytes32 itx, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteSession) BurnBySignUnShieldTx(itx [32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySignUnShieldTx(&_Prvvote.TransactOpts, itx, v, r, s)
}

// BurnBySignUnShieldTx is a paid mutator transaction binding the contract method 0xcc50aa5c.
//
// Solidity: function burnBySignUnShieldTx(bytes32 itx, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) BurnBySignUnShieldTx(itx [32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.BurnBySignUnShieldTx(&_Prvvote.TransactOpts, itx, v, r, s)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.DecreaseAllowance(&_Prvvote.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_Prvvote *PrvvoteTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _Prvvote.Contract.Delegate(&_Prvvote.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.DelegateBySig(&_Prvvote.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.IncreaseAllowance(&_Prvvote.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "initialize", name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Initialize is a paid mutator transaction binding the contract method 0x4cd88b76.
//
// Solidity: function initialize(string name_, string symbol_) returns()
func (_Prvvote *PrvvoteTransactorSession) Initialize(name_ string, symbol_ string) (*types.Transaction, error) {
	return _Prvvote.Contract.Initialize(&_Prvvote.TransactOpts, name_, symbol_)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactor) Mint(opts *bind.TransactOpts, inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "mint", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Mint is a paid mutator transaction binding the contract method 0x24f178ff.
//
// Solidity: function mint(bytes inst, uint256 heights, bytes32[] instPaths, bool[] instPathIsLefts, bytes32 instRoots, bytes32 blkData, uint256[] sigIdxs, uint8[] sigVs, bytes32[] sigRs, bytes32[] sigSs) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Mint(inst []byte, heights *big.Int, instPaths [][32]byte, instPathIsLefts []bool, instRoots [32]byte, blkData [32]byte, sigIdxs []*big.Int, sigVs []uint8, sigRs [][32]byte, sigSs [][32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Mint(&_Prvvote.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_Prvvote *PrvvoteTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Prvvote.Contract.Permit(&_Prvvote.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.Transfer(&_Prvvote.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Prvvote *PrvvoteTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Prvvote.Contract.TransferFrom(&_Prvvote.TransactOpts, from, to, amount)
}

// PrvvoteApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Prvvote contract.
type PrvvoteApprovalIterator struct {
	Event *PrvvoteApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteApproval represents a Approval event raised by the Prvvote contract.
type PrvvoteApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PrvvoteApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteApprovalIterator{contract: _Prvvote.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PrvvoteApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteApproval)
				if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseApproval(log types.Log) (*PrvvoteApproval, error) {
	event := new(PrvvoteApproval)
	if err := _Prvvote.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the Prvvote contract.
type PrvvoteDelegateChangedIterator struct {
	Event *PrvvoteDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateChanged represents a DelegateChanged event raised by the Prvvote contract.
type PrvvoteDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*PrvvoteDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateChangedIterator{contract: _Prvvote.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_Prvvote *PrvvoteFilterer) ParseDelegateChanged(log types.Log) (*PrvvoteDelegateChanged, error) {
	event := new(PrvvoteDelegateChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the Prvvote contract.
type PrvvoteDelegateVotesChangedIterator struct {
	Event *PrvvoteDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDelegateVotesChanged represents a DelegateVotesChanged event raised by the Prvvote contract.
type PrvvoteDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*PrvvoteDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteDelegateVotesChangedIterator{contract: _Prvvote.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *PrvvoteDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDelegateVotesChanged)
				if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_Prvvote *PrvvoteFilterer) ParseDelegateVotesChanged(log types.Log) (*PrvvoteDelegateVotesChanged, error) {
	event := new(PrvvoteDelegateVotesChanged)
	if err := _Prvvote.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Prvvote contract.
type PrvvoteDepositIterator struct {
	Event *PrvvoteDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteDeposit represents a Deposit event raised by the Prvvote contract.
type PrvvoteDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) FilterDeposit(opts *bind.FilterOpts) (*PrvvoteDepositIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &PrvvoteDepositIterator{contract: _Prvvote.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *PrvvoteDeposit) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteDeposit)
				if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Prvvote *PrvvoteFilterer) ParseDeposit(log types.Log) (*PrvvoteDeposit, error) {
	event := new(PrvvoteDeposit)
	if err := _Prvvote.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Prvvote contract.
type PrvvoteInitializedIterator struct {
	Event *PrvvoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteInitialized represents a Initialized event raised by the Prvvote contract.
type PrvvoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*PrvvoteInitializedIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PrvvoteInitializedIterator{contract: _Prvvote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PrvvoteInitialized) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteInitialized)
				if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Prvvote *PrvvoteFilterer) ParseInitialized(log types.Log) (*PrvvoteInitialized, error) {
	event := new(PrvvoteInitialized)
	if err := _Prvvote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteRedepositIterator is returned from FilterRedeposit and is used to iterate over the raw logs and unpacked data for Redeposit events raised by the Prvvote contract.
type PrvvoteRedepositIterator struct {
	Event *PrvvoteRedeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteRedepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteRedeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteRedeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteRedepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteRedepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteRedeposit represents a Redeposit event raised by the Prvvote contract.
type PrvvoteRedeposit struct {
	Token               common.Address
	RedepositIncAddress []byte
	Amount              *big.Int
	Itx                 [32]byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRedeposit is a free log retrieval operation binding the contract event 0x00b45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d.
//
// Solidity: event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx)
func (_Prvvote *PrvvoteFilterer) FilterRedeposit(opts *bind.FilterOpts) (*PrvvoteRedepositIterator, error) {

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Redeposit")
	if err != nil {
		return nil, err
	}
	return &PrvvoteRedepositIterator{contract: _Prvvote.contract, event: "Redeposit", logs: logs, sub: sub}, nil
}

// WatchRedeposit is a free log subscription operation binding the contract event 0x00b45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d.
//
// Solidity: event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx)
func (_Prvvote *PrvvoteFilterer) WatchRedeposit(opts *bind.WatchOpts, sink chan<- *PrvvoteRedeposit) (event.Subscription, error) {

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Redeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteRedeposit)
				if err := _Prvvote.contract.UnpackLog(event, "Redeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeposit is a log parse operation binding the contract event 0x00b45d95b5117447e2fafe7f34def913ff3ba220e4b8688acf37ae2328af7a3d.
//
// Solidity: event Redeposit(address token, bytes redepositIncAddress, uint256 amount, bytes32 itx)
func (_Prvvote *PrvvoteFilterer) ParseRedeposit(log types.Log) (*PrvvoteRedeposit, error) {
	event := new(PrvvoteRedeposit)
	if err := _Prvvote.contract.UnpackLog(event, "Redeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrvvoteTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Prvvote contract.
type PrvvoteTransferIterator struct {
	Event *PrvvoteTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrvvoteTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrvvoteTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrvvoteTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrvvoteTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrvvoteTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrvvoteTransfer represents a Transfer event raised by the Prvvote contract.
type PrvvoteTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PrvvoteTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PrvvoteTransferIterator{contract: _Prvvote.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PrvvoteTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Prvvote.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrvvoteTransfer)
				if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Prvvote *PrvvoteFilterer) ParseTransfer(log types.Log) (*PrvvoteTransfer, error) {
	event := new(PrvvoteTransfer)
	if err := _Prvvote.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
